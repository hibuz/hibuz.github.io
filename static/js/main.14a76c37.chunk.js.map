{"version":3,"sources":["components/StockList.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["columns","field","headerName","width","headerAlign","renderCell","params","Company","name","value","logo","getValue","description","sortable","valueFormatter","Number","toLocaleString","cellClassName","props","img","startsWith","src","alt","useStyles","makeStyles","root","textAlign","StockList","rows","classes","style","height","className","onRowClick","param","window","open","hideFooter","autoHeight","App","useState","stockList","setStockList","useEffect","PublicGoogleSheetsParser","parse","atob","then","res","data","sort","a","b","id","slice","theme","createStyles","date","marginLeft","Toolbar","disableGutters","Typography","variant","noWrap","Date","yyyy","getFullYear","toString","mm","getMonth","dd","getDate","today","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.14a76c37.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { DataGrid, ColDef, CellParams, RowParams } from '@material-ui/data-grid';\n\nconst columns: ColDef[] = [\n  { field: 'id', headerName: '순위', width: 62 },\n  { field: 'name_ko',\n    headerName: '기업',\n    headerAlign: 'center',\n    width: 140,\n    renderCell: (params: CellParams) => (\n      <Company name={params.value} logo={params.getValue('logo')} />\n    )\n  },\n  {\n    field: 'marketcap_krw',\n    headerName: '시총(₩)',\n    description: '실시간 원화 환율 적용',\n    width: 102,\n    sortable: false,\n    valueFormatter: ({value}) => Number(value).toLocaleString() + ' 조원'\n  },\n  {\n    field: 'marketcap_usd',\n    headerName: '시총($)',\n    description: '실시간 달러 환율 적용',\n    width: 98,\n    sortable: false,\n    valueFormatter: ({value}) =>\n      '$' + (Number(value) >= 10000 ? Number(value)/1000 + '조' : Number(value).toLocaleString() + '억')\n  },\n  { field: 'company', headerName: '영문이름', width: 250 },\n  { field: 'price',\n    headerName: '주가',\n    width: 90,\n    cellClassName: 'align-right',\n    headerAlign: 'right',\n    valueFormatter: ({value}) => Number(value).toLocaleString()\n },\n { field: 'currency', headerName: '통화', width: 65 },\n { field: 'exchange', headerName: '거래소', width: 100 },\n];\n\nfunction Company(props: any){\n\n  let img = '' + props.logo;\n  if (!img.startsWith('http')) {\n    img = 'https://' + props.logo + '/favicon.ico';\n  }\n  return <div><img width=\"15\" src={img} alt={props.name}/> <span>{props.name}</span></div>\n};\n\nconst useStyles = makeStyles({\n  root: {\n    '& .align-right': {\n      textAlign: 'right',\n    },\n  },\n});\n\nexport default function StockList({rows}: any) {\n\n  const classes = useStyles();\n\n  const onRowClick = (param: RowParams) => {\n    window.open('https://finance.google.com/finance?q=' + param.getValue('exchange') + ':' + param.getValue('symbol') + '&tbm=fin', 'google_fin');\n  }\n\n  return (\n    <div style={{ height: 1000, width: '100%' }} className={classes.root}>\n      <DataGrid rows={rows} columns={columns} onRowClick={onRowClick} hideFooter autoHeight />\n    </div>\n  )\n}\n","import React, { useState, useEffect } from 'react';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\n\n// @ts-ignore\nimport PublicGoogleSheetsParser from 'public-google-sheets-parser';\n\nimport StockList from './components/StockList';\n\nconst App = () => {\n  const [stockList, setStockList] = useState(null);\n\n  function fetchStockData() {\n\n    const parser = new PublicGoogleSheetsParser();\n    parser.parse(atob('MWFYem5zOW1ndWNXZjJodjBuT1JuRnFtTjZLdXhObDlGVEZYaklITlllZzQ'))\n      .then((res: any) => {\n        const data = res.sort((a: any, b: any) => a.id > b.id ? 1 : -1)\n          .slice(0, 20);\n        setStockList(data)\n    });\n  }\n\n  useEffect(() => {\n    fetchStockData();\n  }, []);\n\n  const useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n      date: {\n        marginLeft: 40,\n      },\n    }),\n  );\n\n  const classes = useStyles();\n\n  function today() {\n    const date = new Date();\n    var yyyy = date.getFullYear().toString();\n    var mm = (date.getMonth() + 1).toString();\n    var dd = date.getDate().toString();\n    return  yyyy + \"-\" + (mm[1] ? mm : \"0\" + mm[0]) + \"-\" + (dd[1] ? dd : \"0\" + dd[0]);\n  }\n\n  return (\n    <div>\n      <Toolbar disableGutters>\n        <Typography variant=\"h6\">\n          전세계 기업 시총 TOP20\n        </Typography>\n        <Typography variant=\"caption\" className={classes.date} noWrap>\n          {today()}\n        </Typography>\n      </Toolbar>\n      {stockList != null && <StockList rows={stockList}/>}\n    </div>\n  )\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}